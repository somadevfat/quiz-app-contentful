plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.compose' version '2.0.0' // Add version
    id 'androidx.navigation.safeargs' // Use Safe Args Java plugin
    id 'kotlin-kapt' // Hilt用に kapt プラグインを追加 (Hiltプラグインの前に配置)
    id 'dagger.hilt.android.plugin' // Hilt プラグインを追加
    id 'com.google.gms.google-services' // Add this line for Google Services plugin
    id "org.jlleitschuh.gradle.ktlint" version "12.1.1" // ktlint プラグイン追加
    id "io.gitlab.arturbosch.detekt" version "1.23.6" // detekt プラグイン追加
}

android {
    namespace 'com.example.contentful_javasilver'
    compileSdk 35

    defaultConfig {
        applicationId "com.example.contentful_javasilver"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Roomスキーマエクスポート設定
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        // local.propertiesから値を読み込んで BuildConfig に追加
        def localProperties = new Properties()
        localProperties.load(new FileInputStream(rootProject.file("local.properties")))

        buildConfigField "String", "CONTENTFUL_SPACE_ID", "\"${localProperties['CONTENTFUL_SPACE_ID']}\""
        buildConfigField "String", "CONTENTFUL_ACCESS_TOKEN", "\"${localProperties['CONTENTFUL_ACCESS_TOKEN']}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        dataBinding true
        viewBinding true
        buildConfig true
        compose true
    }
}

dependencies {
    // Firebase
    implementation platform('com.google.firebase:firebase-bom:33.12.0') // Add Firebase BOM
    implementation 'com.google.firebase:firebase-auth-ktx' // Add Firebase Authentication KTX
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation("com.google.firebase:firebase-analytics")

    implementation libs.navigation.fragment.ktx
    implementation libs.navigation.ui.ktx
    def room_version = "2.6.1"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    // annotationProcessor "androidx.room:room-compiler:$room_version" // Java用なのでコメントアウト
    kapt "androidx.room:room-compiler:$room_version" // Kotlin用に kapt を使用
    implementation "androidx.room:room-ktx:$room_version"

    // Contentful
    implementation 'com.contentful.java:java-sdk:10.5.18'

    // AndroidX
    implementation 'androidx.appcompat:appcompat:1.7.0'
    // implementation 'com.google.android.material:material:1.12.0' // コメントアウト
    implementation 'com.google.android.material:material:1.11.0' // 有効化
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.7.7'
    implementation 'androidx.navigation:navigation-ui-ktx:2.7.7'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'

    // 暗号化SharedPreferences
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'

    // ViewModel
    def lifecycle_version = "2.6.2"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    // Kotlin Coroutines
    def coroutines_version = "1.7.3" // Use the latest stable version
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$coroutines_version" // Add this for Firebase await()

    // Lottie for Android
    def lottieVersion = "6.4.1" // Use a recent stable version
    implementation "com.airbnb.android:lottie:$lottieVersion"

    // Preference
    implementation 'androidx.preference:preference-ktx:1.2.1'

    // Jetpack DataStore (Preferences)
    implementation "androidx.datastore:datastore-preferences:1.1.1"

    // Hilt (Dagger)
    implementation "com.google.dagger:hilt-android:2.51.1"
    kapt "com.google.dagger:hilt-compiler:2.51.1"
    implementation "androidx.hilt:hilt-navigation-compose:1.2.0" // Add Hilt Navigation Compose

    // Jetpack Compose BOM (Bill of Materials) - Recommended for managing versions
    def composeBom = platform('androidx.compose:compose-bom:2024.06.00') // Use the latest BOM version
    implementation composeBom
    androidTestImplementation composeBom

    // Compose UI
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling' // Tooling for debug builds only

    // Compose Material 3
    implementation 'androidx.compose.material3:material3'

    // Compose Material Icons (Extended set for more icons)
    implementation "androidx.compose.material:material-icons-extended"

    // Compose Integration with Activities
    implementation 'androidx.activity:activity-compose:1.9.1' // Use appropriate version

    // Compose Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.8.4' // Use appropriate version

    // Compose Integration with Lifecycle (for collectAsStateWithLifecycle)
    implementation 'androidx.lifecycle:lifecycle-runtime-compose:2.8.4' // Use appropriate version

    // Add this for observeAsState to work with LiveData
    implementation "androidx.compose.runtime:runtime-livedata"

    // Optional - Compose Integration with Navigation (if you plan to use Compose Navigation)
    // implementation "androidx.navigation:navigation-compose:2.7.7"

    // Optional - ConstraintLayout for Compose
    // implementation "androidx.constraintlayout:constraintlayout-compose:1.0.1"

    // Optional - Coil for image loading in Compose
    // implementation("io.coil-kt:coil-compose:2.6.0")

    // Google Sign-In
    implementation 'com.google.android.gms:play-services-auth:21.1.0' // Check for latest version if needed

    // Firebase Authentication (already likely present)
    // implementation 'com.google.firebase:firebase-auth'
}

kapt {
    javacOptions {
        option("--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED")
        option("--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED")
        option("--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED")
        option("--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED")
        option("--add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED")
        option("--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED")
        option("--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED")
        option("--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED")
        option("--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED")
        option("--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED")
    }
}

// Apply the kapt plugin (Optional - Usually not needed unless specific configurations are required)
// kapt {
//    correctErrorTypes true
// }

// ktlint configuration
ktlint {
    version.set("1.3.1") // Specify ktlint version (consider using the latest stable)
    android.set(true) // Enable Android Kotlin Style Guide rules
    ignoreFailures.set(true) // Allow build even if lint errors exist (change to false later)
    // disabledRules.set(["rule-id-to-disable"]) // Example: Disable specific rules if needed
}
